/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package banksimulator;

import java.awt.Color;
import java.awt.Font;
import java.awt.Image;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.image.BufferedImage;
import java.io.File;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.ResultSet;
import java.sql.Statement;
import java.time.LocalDate;
import javax.imageio.ImageIO;
import javax.swing.ImageIcon;
import javax.swing.JButton;
import javax.swing.JLabel;
import javax.swing.JOptionPane;

/**
 *
 * @author deshm
 */

public class FastCash extends javax.swing.JFrame implements ActionListener{

    /**
     * Creates new form FastCash
     */
    JButton btn100,btn500,btn1000,btn2000,btn5000,btn10000,btncancel;
    String id;
    public FastCash(String i) {
        initComponents();
        id=i;
        addImageToLabel();
        
        JLabel l1 = new JLabel("Select amount to withdraw");
        l1.setBounds(160, 250, 300, 22);
        l1.setForeground(Color.WHITE);
        l1.setFont(new Font("System",Font.BOLD,16));
        lblLogo.add(l1);
        
        btn100 = new JButton("Rs. 100");
        btn100.setBounds(140, 300, 140, 40);
        btn100.setBackground(Color.WHITE);
        btn100.setForeground(Color.BLACK);
        btn100.setFont(new Font("System",Font.BOLD,14));
        lblLogo.add(btn100);
        btn100.addActionListener(this);
        
        btn500 = new JButton("Rs. 500");
        btn500.setBounds(280, 300, 140, 40);
        btn500.setBackground(Color.WHITE);
        btn500.setForeground(Color.BLACK);
        btn500.setFont(new Font("System",Font.BOLD,14));
        lblLogo.add(btn500);
        btn500.addActionListener(this);
        
        btn1000 = new JButton("Rs. 1000");
        btn1000.setBounds(140, 340, 140, 40);
        btn1000.setBackground(Color.WHITE);
        btn1000.setForeground(Color.BLACK);
        btn1000.setFont(new Font("System",Font.BOLD,14));
        lblLogo.add(btn1000);
        btn1000.addActionListener(this);
        
        btn2000 = new JButton("Rs. 2000");
        btn2000.setBounds(280, 340, 140, 40);
        btn2000.setBackground(Color.WHITE);
        btn2000.setForeground(Color.BLACK);
        btn2000.setFont(new Font("System",Font.BOLD,14));
        lblLogo.add(btn2000);
        btn2000.addActionListener(this);
        
        btn10000 = new JButton("Rs. 10000");
        btn10000.setBounds(280, 380, 140, 40);
        btn10000.setBackground(Color.WHITE);
        btn10000.setForeground(Color.BLACK);
        btn10000.setFont(new Font("System",Font.BOLD,14));
        lblLogo.add(btn10000);
        btn10000.addActionListener(this);
        
        btn5000 = new JButton("Rs. 5000");
        btn5000.setBounds(140, 380, 140, 40);
        btn5000.setBackground(Color.WHITE);
        btn5000.setForeground(Color.BLACK);
        btn5000.setFont(new Font("System",Font.BOLD,14));
        lblLogo.add(btn5000);
        btn5000.addActionListener(this);
        
        btncancel = new JButton("EXIT");
        btncancel.setBounds(280, 440, 140, 40);
        btncancel.setBackground(Color.WHITE);
        btncancel.setForeground(Color.BLACK);
        btncancel.setFont(new Font("System",Font.BOLD,14));
        lblLogo.add(btncancel);
        btncancel.addActionListener(this);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        lblLogo = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Fast Cash");

        lblLogo.setText("jLabel1");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(lblLogo, javax.swing.GroupLayout.DEFAULT_SIZE, 750, Short.MAX_VALUE)
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(lblLogo, javax.swing.GroupLayout.DEFAULT_SIZE, 727, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents
    private void addImageToLabel()
    {
        BufferedImage img;
        try
        {
            img = ImageIO.read(new File("C:\\Users\\deshm\\Downloads\\atm2.jpeg"));
            Image dimg = img.getScaledInstance(lblLogo.getWidth(), lblLogo.getHeight(), Image.SCALE_SMOOTH);
            ImageIcon imageicon = new ImageIcon(dimg);
            lblLogo.setIcon(imageicon);
        }
        catch(Exception e)
        {
            JOptionPane.showMessageDialog(this, e);
        }
    }
    /**
     * @param args the command line arguments
     */
    public void actionPerformed(ActionEvent e) {
        
        if(e.getSource() == btncancel)
        {
            this.dispose();
        }
        if(e.getSource() == btn100)
        {
            System.out.println("HII");
            try
            {
                int amount=0;
                Connection c = DriverManager.getConnection("jdbc:mysql://localhost:3306/bank","root","sa123");
                Statement st = c.createStatement();
                String query = "select * from transection where id = "+id+" ; ";
                ResultSet rs = st.executeQuery(query);
                if(rs.next())
                {
                    amount = Integer.parseInt(rs.getString("amount"));
                }
                else
                {
                    JOptionPane.showMessageDialog(this, "You Don't have enough balance");
                    return;
                }
                while(true)
                {
                    if(rs.next())
                    {
                        amount = Integer.parseInt(rs.getString("amount"));
                    }
                    else
                    {
                        break;
                    }
                }
                int a = 100;
                if(a > amount)
                {
                    JOptionPane.showMessageDialog(this, "You Don't have enough balance");
                    return;
                }
                
                int depo = 100;
                amount = amount-depo;
                depo = (-1)*depo;
                query = "insert into transection values ( "+id+","+depo+","+amount+",'"+LocalDate.now()+"');";
                st.executeUpdate(query);
                JOptionPane.showMessageDialog(this, "Withdrawn Successfully");
                new Transection(id).setVisible(true);
                this.dispose();
            }
            catch(Exception ex)
            {
                
            }
        }
        if(e.getSource() == btn500)
        {
            try
            {
                int amount=0;
                Connection c = DriverManager.getConnection("jdbc:mysql://localhost:3306/bank","root","sa123");
                Statement st = c.createStatement();
                String query = "select * from transection where id = "+id+" ; ";
                ResultSet rs = st.executeQuery(query);
                if(rs.next())
                {
                    amount = Integer.parseInt(rs.getString("amount"));
                }
                else
                {
                    JOptionPane.showMessageDialog(this, "You Don't have enough balance");
                    return;
                }
                while(true)
                {
                    if(rs.next())
                    {
                        amount = Integer.parseInt(rs.getString("amount"));
                    }
                    else
                    {
                        break;
                    }
                }
                int a = 500;
                if(a > amount)
                {
                    JOptionPane.showMessageDialog(this, "You Don't have enough balance");
                    return;
                }
                
                int depo = 500;
                amount = amount-depo;
                depo = (-1)*depo;
                query = "insert into transection values ( "+id+","+depo+","+amount+",'"+LocalDate.now()+"');";
                st.executeUpdate(query);
                JOptionPane.showMessageDialog(this, "Withdrawn Successfully");
                new Transection(id).setVisible(true);
                this.dispose();
            }
            catch(Exception ex)
            {
                
            }
        }
        if(e.getSource() == btn1000)
        {
            System.out.println("HII");
            try
            {
                int amount=0;
                Connection c = DriverManager.getConnection("jdbc:mysql://localhost:3306/bank","root","sa123");
                Statement st = c.createStatement();
                String query = "select * from transection where id = "+id+" ; ";
                ResultSet rs = st.executeQuery(query);
                if(rs.next())
                {
                    amount = Integer.parseInt(rs.getString("amount"));
                }
                else
                {
                    JOptionPane.showMessageDialog(this, "You Don't have enough balance");
                    return;
                }
                while(true)
                {
                    if(rs.next())
                    {
                        amount = Integer.parseInt(rs.getString("amount"));
                    }
                    else
                    {
                        break;
                    }
                }
                int a = 1000;
                if(a > amount)
                {
                    JOptionPane.showMessageDialog(this, "You Don't have enough balance");
                    return;
                }
                
                int depo = 1000;
                amount = amount-depo;
                depo = (-1)*depo;
                query = "insert into transection values ( "+id+","+depo+","+amount+",'"+LocalDate.now()+"');";
                st.executeUpdate(query);
                JOptionPane.showMessageDialog(this, "Withdrawn Successfully");
                new Transection(id).setVisible(true);
                this.dispose();
            }
            catch(Exception ex)
            {
                
            }
        }
        if(e.getSource() == btn2000)
        {
            try
            {
                int amount=0;
                Connection c = DriverManager.getConnection("jdbc:mysql://localhost:3306/bank","root","sa123");
                Statement st = c.createStatement();
                String query = "select * from transection where id = "+id+" ; ";
                ResultSet rs = st.executeQuery(query);
                if(rs.next())
                {
                    amount = Integer.parseInt(rs.getString("amount"));
                }
                else
                {
                    JOptionPane.showMessageDialog(this, "You Don't have enough balance");
                    return;
                }
                while(true)
                {
                    if(rs.next())
                    {
                        amount = Integer.parseInt(rs.getString("amount"));
                    }
                    else
                    {
                        break;
                    }
                }
                int a = 2000;
                if(a > amount)
                {
                    JOptionPane.showMessageDialog(this, "You Don't have enough balance");
                    return;
                }
                
                int depo = 2000;
                amount = amount-depo;
                depo = (-1)*depo;
                query = "insert into transection values ( "+id+","+depo+","+amount+",'"+LocalDate.now()+"');";
                st.executeUpdate(query);
                JOptionPane.showMessageDialog(this, "Withdrawn Successfully");
                new Transection(id).setVisible(true);
                this.dispose();
            }
            catch(Exception ex)
            {
                
            }
        }
        if(e.getSource() == btn100)
        {
            try
            {
                int amount=0;
                Connection c = DriverManager.getConnection("jdbc:mysql://localhost:3306/bank","root","sa123");
                Statement st = c.createStatement();
                String query = "select * from transection where id = "+id+" ; ";
                ResultSet rs = st.executeQuery(query);
                if(rs.next())
                {
                    amount = Integer.parseInt(rs.getString("amount"));
                }
                else
                {
                    JOptionPane.showMessageDialog(this, "You Don't have enough balance");
                    return;
                }
                while(true)
                {
                    if(rs.next())
                    {
                        amount = Integer.parseInt(rs.getString("amount"));
                    }
                    else
                    {
                        break;
                    }
                }
                int a = 2000;
                if(a > amount)
                {
                    JOptionPane.showMessageDialog(this, "You Don't have enough balance");
                    return;
                }
                
                int depo = 2000;
                amount = amount-depo;
                depo = (-1)*depo;
                query = "insert into transection values ( "+id+","+depo+","+amount+",'"+LocalDate.now()+"');";
                st.executeUpdate(query);
                JOptionPane.showMessageDialog(this, "Withdrawn Successfully");
                new Transection(id).setVisible(true);
                this.dispose();
            }
            catch(Exception ex)
            {
                
            }
        }
        if(e.getSource() == btn5000)
        {
            try
            {
                int amount=0;
                Connection c = DriverManager.getConnection("jdbc:mysql://localhost:3306/bank","root","sa123");
                Statement st = c.createStatement();
                String query = "select * from transection where id = "+id+" ; ";
                ResultSet rs = st.executeQuery(query);
                if(rs.next())
                {
                    amount = Integer.parseInt(rs.getString("amount"));
                }
                else
                {
                    JOptionPane.showMessageDialog(this, "You Don't have enough balance");
                    return;
                }
                while(true)
                {
                    if(rs.next())
                    {
                        amount = Integer.parseInt(rs.getString("amount"));
                    }
                    else
                    {
                        break;
                    }
                }
                int a = 5000;
                if(a > amount)
                {
                    JOptionPane.showMessageDialog(this, "You Don't have enough balance");
                    return;
                }
                
                int depo = 5000;
                amount = amount-depo;
                depo = (-1)*depo;
                query = "insert into transection values ( "+id+","+depo+","+amount+",'"+LocalDate.now()+"');";
                st.executeUpdate(query);
                JOptionPane.showMessageDialog(this, "Withdrawn Successfully");
                new Transection(id).setVisible(true);
                this.dispose();
            }
            catch(Exception ex)
            {
                
            }
        }
        if(e.getSource() == btn10000)
        {
            try
            {
                int amount=0;
                Connection c = DriverManager.getConnection("jdbc:mysql://localhost:3306/bank","root","sa123");
                Statement st = c.createStatement();
                String query = "select * from transection where id = "+id+" ; ";
                ResultSet rs = st.executeQuery(query);
                if(rs.next())
                {
                    amount = Integer.parseInt(rs.getString("amount"));
                }
                else
                {
                    JOptionPane.showMessageDialog(this, "You Don't have enough balance");
                    return;
                }
                while(true)
                {
                    if(rs.next())
                    {
                        amount = Integer.parseInt(rs.getString("amount"));
                    }
                    else
                    {
                        break;
                    }
                }
                int a = 10000;
                if(a > amount)
                {
                    JOptionPane.showMessageDialog(this, "You Don't have enough balance");
                    return;
                }
                
                int depo = 10000;
                amount = amount-depo;
                depo = (-1)*depo;
                query = "insert into transection values ( "+id+","+depo+","+amount+",'"+LocalDate.now()+"');";
                st.executeUpdate(query);
                JOptionPane.showMessageDialog(this, "Withdrawn Successfully");
                new Transection(id).setVisible(true);
                this.dispose();
            }
            catch(Exception ex)
            {
                
            }
        }
    }
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(FastCash.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(FastCash.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(FastCash.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(FastCash.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                //new FastCash("9992").setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel jPanel1;
    private javax.swing.JLabel lblLogo;
    // End of variables declaration//GEN-END:variables
}
